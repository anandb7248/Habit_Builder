{"ast":null,"code":"import firebase from 'firebase/app';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE, VERIFY_SUCCESS, VERIFY_REQUEST } from \"./Types\";\n\nvar requestLogin = function requestLogin() {\n  return {\n    type: LOGIN_REQUEST\n  };\n};\n\nvar receiveLogin = function receiveLogin(user) {\n  return {\n    type: LOGIN_SUCCESS,\n    user: user\n  };\n};\n\nvar loginError = function loginError() {\n  return {\n    type: LOGIN_FAILURE\n  };\n};\n\nvar requestLogout = function requestLogout() {\n  return {\n    type: LOGOUT_REQUEST\n  };\n};\n\nvar receiveLogout = function receiveLogout() {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\nvar logoutError = function logoutError() {\n  return {\n    type: LOGOUT_FAILURE\n  };\n};\n\nvar verifyRequest = function verifyRequest() {\n  return {\n    type: VERIFY_REQUEST\n  };\n};\n\nvar verifySuccess = function verifySuccess() {\n  return {\n    type: VERIFY_SUCCESS\n  };\n};\n\nexport var loginUser = function loginUser(email, password) {\n  return function (dispatch) {\n    dispatch(requestLogin());\n    firebase.auth().signInWithEmailAndPassword(email, password).then(function (user) {\n      dispatch(receiveLogin(user));\n    }).catch(function (error) {\n      dispatch(loginError());\n    });\n  };\n};\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    dispatch(requestLogout());\n    firebase.auth().signOut().then(function () {\n      dispatch(receiveLogout());\n    }).catch(function (error) {\n      dispatch(logoutError());\n    });\n  };\n};\nexport var verifyAuth = function verifyAuth() {\n  return function (dispatch) {\n    dispatch(verifyRequest());\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user !== null) {\n        dispatch(receiveLogin(user));\n      }\n\n      dispatch(verifySuccess());\n    });\n  };\n};","map":{"version":3,"sources":["/mnt/c/Users/couga/Documents/Github/Habit_Builder/ReactNative/src/redux/actions/Auth.js"],"names":["firebase","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","VERIFY_SUCCESS","VERIFY_REQUEST","requestLogin","type","receiveLogin","user","loginError","requestLogout","receiveLogout","logoutError","verifyRequest","verifySuccess","loginUser","email","password","dispatch","auth","signInWithEmailAndPassword","then","catch","error","logoutUser","signOut","verifyAuth","onAuthStateChanged"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,cAPF,EAQEC,cARF;;AAgBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,SAAO;AACLC,IAAAA,IAAI,EAAET;AADD,GAAP;AAGH,CAJD;;AAMA,IAAMU,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI,EAAI;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAER,aADH;AAEHU,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CALD;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,SAAO;AACLH,IAAAA,IAAI,EAAEP;AADD,GAAP;AAGH,CAJD;;AAMA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,SAAO;AACLJ,IAAAA,IAAI,EAAEN;AADD,GAAP;AAGD,CAJD;;AAMA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,SAAO;AACHL,IAAAA,IAAI,EAAEL;AADH,GAAP;AAGD,CAJD;;AAMA,IAAMW,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,SAAO;AACLN,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD,CAJD;;AAMA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,SAAO;AACLP,IAAAA,IAAI,EAAEF;AADD,GAAP;AAGD,CAJD;;AAMA,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,SAAO;AACLR,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD,CAJD;;AAYA,OAAO,IAAMY,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,QAAR;AAAA,SAAqB,UAAAC,QAAQ,EAAI;AAExDA,IAAAA,QAAQ,CAACb,YAAY,EAAb,CAAR;AACAT,IAAAA,QAAQ,CAACuB,IAAT,GAAgBC,0BAAhB,CAA2CJ,KAA3C,EAAkDC,QAAlD,EACCI,IADD,CACM,UAAAb,IAAI,EAAI;AACZU,MAAAA,QAAQ,CAACX,YAAY,CAACC,IAAD,CAAb,CAAR;AACD,KAHD,EAICc,KAJD,CAIO,UAAAC,KAAK,EAAI;AACdL,MAAAA,QAAQ,CAACT,UAAU,EAAX,CAAR;AACD,KAND;AAOD,GAVwB;AAAA,CAAlB;AAeP,OAAO,IAAMe,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAN,QAAQ,EAAI;AAE1CA,IAAAA,QAAQ,CAACR,aAAa,EAAd,CAAR;AACAd,IAAAA,QAAQ,CAACuB,IAAT,GAAgBM,OAAhB,GACCJ,IADD,CACM,YAAM;AACVH,MAAAA,QAAQ,CAACP,aAAa,EAAd,CAAR;AACD,KAHD,EAICW,KAJD,CAIO,UAAAC,KAAK,EAAI;AACdL,MAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACD,KAND;AAOD,GAVyB;AAAA,CAAnB;AAmBP,OAAO,IAAMc,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAR,QAAQ,EAAI;AAC1CA,IAAAA,QAAQ,CAACL,aAAa,EAAd,CAAR;AACAjB,IAAAA,QAAQ,CAACuB,IAAT,GAAgBQ,kBAAhB,CAAmC,UAAAnB,IAAI,EAAI;AACzC,UAAIA,IAAI,KAAK,IAAb,EAAmB;AAKjBU,QAAAA,QAAQ,CAACX,YAAY,CAACC,IAAD,CAAb,CAAR;AACD;;AACDU,MAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;AACD,KATD;AAUD,GAZyB;AAAA,CAAnB","sourcesContent":["import firebase from 'firebase/app';\r\nimport {\r\n  LOGIN_REQUEST, \r\n  LOGIN_SUCCESS, \r\n  LOGIN_FAILURE,\r\n  LOGOUT_REQUEST,\r\n  LOGOUT_SUCCESS,\r\n  LOGOUT_FAILURE,\r\n  VERIFY_SUCCESS,\r\n  VERIFY_REQUEST,\r\n} from \"./Types\";\r\n\r\n\r\n/*\r\n  These functions return the action types that our reducers will read. \r\n*/\r\n\r\nconst requestLogin = () => {\r\n    return {\r\n      type: LOGIN_REQUEST\r\n    };\r\n};\r\n\r\nconst receiveLogin = user => {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        user\r\n    };\r\n};\r\n\r\nconst loginError = () => {\r\n    return {\r\n      type: LOGIN_FAILURE\r\n    };\r\n};\r\n\r\nconst requestLogout = () => {\r\n  return {\r\n    type: LOGOUT_REQUEST\r\n  };\r\n};\r\n\r\nconst receiveLogout = () => {\r\n  return {\r\n      type: LOGOUT_SUCCESS\r\n  };\r\n};\r\n\r\nconst logoutError = () => {\r\n  return {\r\n    type: LOGOUT_FAILURE\r\n  };\r\n};\r\n\r\nconst verifyRequest = () => {\r\n  return {\r\n    type: VERIFY_REQUEST\r\n  };\r\n};\r\n\r\nconst verifySuccess = () => {\r\n  return {\r\n    type: VERIFY_SUCCESS\r\n  };\r\n};\r\n\r\n/*\r\n  Login thunk -> takes in credentials from login component as well\r\n  as the dispatch function that is passed to all our actions we init\r\n  from components.\r\n*/\r\n\r\nexport const loginUser = (email, password) => dispatch => {\r\n  /* alerts our store that a user is logging in */\r\n  dispatch(requestLogin());\r\n  firebase.auth().signInWithEmailAndPassword(email, password)\r\n  .then(user => {\r\n    dispatch(receiveLogin(user));\r\n  })\r\n  .catch(error => {\r\n    dispatch(loginError());\r\n  });\r\n};\r\n\r\n/*\r\n  Logout thunk -> logs auth user out of firebase\r\n*/\r\nexport const logoutUser = () => dispatch => {\r\n  /* Notify store of logout request */\r\n  dispatch(requestLogout());\r\n  firebase.auth().signOut()\r\n  .then(() => {\r\n    dispatch(receiveLogout());\r\n  })\r\n  .catch(error => {\r\n    dispatch(logoutError());\r\n  })\r\n}\r\n\r\n/*\r\n  Auth State Change thunk -> calls firebase .onAuthStateChange function\r\n  which looks for a preexisting user session and re-establishes it. This\r\n  will happen on refresh. Method also sets up a listener while the app is \r\n  running to change user session tokens when they expire. \r\n*/\r\n\r\nexport const verifyAuth = () => dispatch => {\r\n  dispatch(verifyRequest());\r\n  firebase.auth().onAuthStateChanged(user => {\r\n    if (user !== null) {\r\n      /*\r\n        We check if user is null because we only want to log \r\n        someone in if firebase finds a user session.\r\n      */\r\n      dispatch(receiveLogin(user));\r\n    }\r\n    dispatch(verifySuccess());\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}