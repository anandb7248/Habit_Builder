{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nvar screenWidth = Dimensions.get('window').width;\nvar screenHeight = Dimensions.get('window').height;\n\nvar widthPercentageToDP = function widthPercentageToDP(widthPercent) {\n  var elemWidth = typeof widthPercent === \"number\" ? widthPercent : parseFloat(widthPercent);\n  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);\n};\n\nvar heightPercentageToDP = function heightPercentageToDP(heightPercent) {\n  var elemHeight = typeof heightPercent === \"number\" ? heightPercent : parseFloat(heightPercent);\n  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n};\n\nvar listenOrientationChange = function listenOrientationChange(that) {\n  Dimensions.addEventListener('change', function (newDimensions) {\n    screenWidth = newDimensions.window.width;\n    screenHeight = newDimensions.window.height;\n    that.setState({\n      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'\n    });\n  });\n};\n\nvar removeOrientationListener = function removeOrientationListener() {\n  Dimensions.removeEventListener('change', function () {});\n};\n\nexport { widthPercentageToDP, heightPercentageToDP, listenOrientationChange, removeOrientationListener };","map":{"version":3,"sources":["/mnt/c/Users/couga/Documents/Github/Habit_Builder/ReactNative/node_modules/react-native-responsive-screen/index.js"],"names":["screenWidth","Dimensions","get","width","screenHeight","height","widthPercentageToDP","widthPercent","elemWidth","parseFloat","PixelRatio","roundToNearestPixel","heightPercentageToDP","heightPercent","elemHeight","listenOrientationChange","that","addEventListener","newDimensions","window","setState","orientation","removeOrientationListener","removeEventListener"],"mappings":";;AAIA,IAAIA,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA3C;AAGA,IAAIC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA5C;;AAQA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,YAAY,EAAI;AAE1C,MAAMC,SAAS,GAAG,OAAOD,YAAP,KAAwB,QAAxB,GAAmCA,YAAnC,GAAkDE,UAAU,CAACF,YAAD,CAA9E;AAIA,SAAOG,UAAU,CAACC,mBAAX,CAA+BX,WAAW,GAAGQ,SAAd,GAA0B,GAAzD,CAAP;AACD,CAPD;;AAeA,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,aAAa,EAAI;AAE5C,MAAMC,UAAU,GAAG,OAAOD,aAAP,KAAyB,QAAzB,GAAoCA,aAApC,GAAoDJ,UAAU,CAACI,aAAD,CAAjF;AAIA,SAAOH,UAAU,CAACC,mBAAX,CAA+BP,YAAY,GAAGU,UAAf,GAA4B,GAA3D,CAAP;AACD,CAPD;;AAkBA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,IAAI,EAAI;AACtCf,EAAAA,UAAU,CAACgB,gBAAX,CAA4B,QAA5B,EAAsC,UAAAC,aAAa,EAAI;AAErDlB,IAAAA,WAAW,GAAGkB,aAAa,CAACC,MAAd,CAAqBhB,KAAnC;AACAC,IAAAA,YAAY,GAAGc,aAAa,CAACC,MAAd,CAAqBd,MAApC;AAGAW,IAAAA,IAAI,CAACI,QAAL,CAAc;AACZC,MAAAA,WAAW,EAAErB,WAAW,GAAGI,YAAd,GAA6B,UAA7B,GAA0C;AAD3C,KAAd;AAGD,GATD;AAUD,CAXD;;AAmBA,IAAMkB,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtCrB,EAAAA,UAAU,CAACsB,mBAAX,CAA+B,QAA/B,EAAyC,YAAM,CAAE,CAAjD;AACD,CAFD;;AAIA,SACEjB,mBADF,EAEEM,oBAFF,EAGEG,uBAHF,EAIEO,yBAJF","sourcesContent":["// packages\nimport { Dimensions, PixelRatio } from 'react-native';\n\n// Retrieve initial screen's width\nlet screenWidth = Dimensions.get('window').width;\n\n// Retrieve initial screen's height\nlet screenHeight = Dimensions.get('window').height;\n\n/**\n * Converts provided width percentage to independent pixel (dp).\n * @param  {string} widthPercent The percentage of screen's width that UI element should cover\n *                               along with the percentage symbol (%).\n * @return {number}              The calculated dp depending on current device's screen width.\n */\nconst widthPercentageToDP = widthPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemWidth = typeof widthPercent === \"number\" ? widthPercent : parseFloat(widthPercent);\n\n  // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);\n};\n\n/**\n * Converts provided height percentage to independent pixel (dp).\n * @param  {string} heightPercent The percentage of screen's height that UI element should cover\n *                                along with the percentage symbol (%).\n * @return {number}               The calculated dp depending on current device's screen height.\n */\nconst heightPercentageToDP = heightPercent => {\n  // Parse string percentage input and convert it to number.\n  const elemHeight = typeof heightPercent === \"number\" ? heightPercent : parseFloat(heightPercent);\n\n  // Use PixelRatio.roundToNearestPixel method in order to round the layout\n  // size (dp) to the nearest one that correspons to an integer number of pixels.\n  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);\n};\n\n/**\n * Event listener function that detects orientation change (every time it occurs) and triggers \n * screen rerendering. It does that, by changing the state of the screen where the function is\n * called. State changing occurs for a new state variable with the name 'orientation' that will\n * always hold the current value of the orientation after the 1st orientation change.\n * Invoke it inside the screen's constructor or in componentDidMount lifecycle method.\n * @param {object} that Screen's class component this variable. The function needs it to\n *                      invoke setState method and trigger screen rerender (this.setState()).\n */\nconst listenOrientationChange = that => {\n  Dimensions.addEventListener('change', newDimensions => {\n    // Retrieve and save new dimensions\n    screenWidth = newDimensions.window.width;\n    screenHeight = newDimensions.window.height;\n\n    // Trigger screen's rerender with a state update of the orientation variable\n    that.setState({\n      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'\n    });\n  });\n};\n\n/**\n * Wrapper function that removes orientation change listener and should be invoked in\n * componentWillUnmount lifecycle method of every class component (UI screen) that\n * listenOrientationChange function has been invoked. This should be done in order to\n * avoid adding new listeners every time the same component is re-mounted.\n */\nconst removeOrientationListener = () => {\n  Dimensions.removeEventListener('change', () => {});\n};\n\nexport {\n  widthPercentageToDP,\n  heightPercentageToDP,\n  listenOrientationChange,\n  removeOrientationListener\n};\n"]},"metadata":{},"sourceType":"module"}