{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/mnt/c/Users/couga/Documents/Github/Habit_Builder/ReactNative/src/screens/SetGoalScreen.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  color: \", \";\\n  font-size: \", \";\\n  font-weight: bold;\\n  margin: auto auto;\\n  font-family: \\\"PTSans-Regular\\\";\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  background: white;\\n  border-radius: 25px;\\n  width: \", \";\\n  height: \", \";\\n  margin: 10px auto;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  color: \", \";\\n  font-size: \", \";\\n  font-weight: bold;\\n  margin: 5px auto;\\n  font-family: \\\"PTSans-Regular\\\";\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  font-size: \", \";\\n  color: white;\\n  margin: 0 auto;\\n  padding: 20px;\\n  font-family: \\\"PTSans-Regular\\\";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  flex: 1;\\n  background-color: \", \";\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport COLORS from \"../styles/Colors\";\nimport PageHeader from \"../components/PageHeader\";\nimport Divider from \"../components/Divider\";\nimport BigButton from \"../components/BigButton\";\nimport moment from \"moment\";\nimport BigTextInput from \"../components/BigTextInput\";\nimport TextLabel from \"../components/TextLabel\";\nimport DatePicker from \"../components/DatePicker\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { heightPercentageToDP as hp, widthPercentageToDP as wp } from \"react-native-responsive-screen\";\n\nfunction SetGoalScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      goal = _useState2[0],\n      setGoal = _useState2[1];\n\n  var _useState3 = useState([\"\", \"\", \"\", \"\", \"\"]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      habits = _useState4[0],\n      setHabits = _useState4[1];\n\n  var defaultDaysToComplete = 21;\n  var startDate = new Date();\n\n  var _useState5 = useState(new Date()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      endDate = _useState6[0],\n      setEndDate = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showDatePicker = _useState8[0],\n      toggleDatePicker = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      numberOfDays = _useState10[0],\n      setNumberOfDays = _useState10[1];\n\n  useEffect(function () {\n    var today = new Date();\n    var twentyOneDaysInFuture = today.setDate(today.getDate() + defaultDaysToComplete);\n    setEndDate(new Date(twentyOneDaysInFuture));\n    setNumberOfDays(defaultDaysToComplete);\n  }, []);\n\n  var configureDates = function configureDates(changedDate) {\n    if (changedDate < startDate) {\n      setEndDate(startDate);\n      setNumberOfDays(0);\n    } else {\n      setEndDate(changedDate);\n      var diffTime = changedDate - startDate;\n      var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      setNumberOfDays(diffDays);\n    }\n  };\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(PageHeader, {\n    text: \"Set a Goal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), React.createElement(StartingDate, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"From Today: \", moment(startDate).format(\"MMM D, YYYY\")), React.createElement(BigTextInput, {\n    inputText: goal,\n    setInputText: setGoal,\n    placeholder: \"What would you like to achieve?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), React.createElement(TextLabel, {\n    label: \"When do you want to achieve your goal?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      flex: 1\n    },\n    onPress: function onPress() {\n      toggleDatePicker(function (prev) {\n        return !prev;\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, moment(endDate).format(\"MMM D, YYYY\")))), React.createElement(DaysToCompletion, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, numberOfDays === 0 ? \"---\" : numberOfDays, \" days to completion\"), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), React.createElement(TextLabel, {\n    label: \"Daily Habits to Achieve your Goal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), habits.map(function (habit, index) {\n    return React.createElement(Container, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, habit !== \"\" ? habit : \"-\")));\n  }), React.createElement(BigButton, {\n    text: \"Set Goal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), React.createElement(DatePicker, {\n    show: showDatePicker,\n    toggle: toggleDatePicker,\n    date: endDate,\n    onChange: configureDates,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default SetGoalScreen;\nvar View = styled.View(_templateObject(), COLORS.appBlue);\nvar StartingDate = styled.Text(_templateObject2(), wp(\"5%\"));\nvar DaysToCompletion = styled.Text(_templateObject3(), COLORS.appYelow, wp(\"4%\"));\nvar Container = styled.View(_templateObject4(), wp(\"85%\"), hp(\"4%\"));\nvar Label = styled.Text(_templateObject5(), COLORS.appBlue, wp(\"4%\"));","map":{"version":3,"sources":["/mnt/c/Users/couga/Documents/Github/Habit_Builder/ReactNative/src/screens/SetGoalScreen.js"],"names":["React","useState","useRef","useEffect","styled","COLORS","PageHeader","Divider","BigButton","moment","BigTextInput","TextLabel","DatePicker","heightPercentageToDP","hp","widthPercentageToDP","wp","SetGoalScreen","props","goal","setGoal","habits","setHabits","defaultDaysToComplete","startDate","Date","endDate","setEndDate","showDatePicker","toggleDatePicker","numberOfDays","setNumberOfDays","today","twentyOneDaysInFuture","setDate","getDate","configureDates","changedDate","diffTime","diffDays","Math","ceil","format","flex","prev","map","habit","index","View","appBlue","StartingDate","Text","DaysToCompletion","appYelow","Container","Label"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport COLORS from \"../styles/Colors\";\r\nimport PageHeader from \"../components/PageHeader\";\r\nimport Divider from \"../components/Divider\";\r\nimport BigButton from \"../components/BigButton\";\r\nimport moment from \"moment\";\r\nimport BigTextInput from \"../components/BigTextInput\";\r\nimport TextLabel from \"../components/TextLabel\";\r\nimport DatePicker from \"../components/DatePicker\";\r\nimport { TouchableOpacity } from \"react-native\";\r\nimport {\r\n  heightPercentageToDP as hp,\r\n  widthPercentageToDP as wp,\r\n} from \"react-native-responsive-screen\";\r\n\r\nfunction SetGoalScreen(props) {\r\n  const [goal, setGoal] = useState(\"\");\r\n  const [habits, setHabits] = useState([\"\", \"\", \"\", \"\", \"\"]);\r\n  const defaultDaysToComplete = 21;\r\n  const startDate = new Date();\r\n  const [endDate, setEndDate] = useState(new Date());\r\n  const [showDatePicker, toggleDatePicker] = useState(false);\r\n  const [numberOfDays, setNumberOfDays] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Right initially, set the end date to 21 days from today\r\n    var today = new Date();\r\n    var twentyOneDaysInFuture = today.setDate(\r\n      today.getDate() + defaultDaysToComplete\r\n    );\r\n    setEndDate(new Date(twentyOneDaysInFuture));\r\n    setNumberOfDays(defaultDaysToComplete);\r\n  }, []);\r\n\r\n  const configureDates = (changedDate) => {\r\n    if (changedDate < startDate) {\r\n      setEndDate(startDate);\r\n      setNumberOfDays(0);\r\n    } else {\r\n      setEndDate(changedDate);\r\n\r\n      const diffTime = changedDate - startDate;\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n      setNumberOfDays(diffDays);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <PageHeader text=\"Set a Goal\"></PageHeader>\r\n      <Divider />\r\n      <StartingDate>\r\n        From Today: {moment(startDate).format(\"MMM D, YYYY\")}\r\n      </StartingDate>\r\n      <BigTextInput\r\n        inputText={goal}\r\n        setInputText={setGoal}\r\n        placeholder=\"What would you like to achieve?\"\r\n      ></BigTextInput>\r\n      <TextLabel label=\"When do you want to achieve your goal?\" />\r\n      <Container>\r\n        <TouchableOpacity\r\n          style={{ flex: 1 }}\r\n          onPress={() => {\r\n            toggleDatePicker((prev) => !prev);\r\n          }}\r\n        >\r\n          <Label>{moment(endDate).format(\"MMM D, YYYY\")}</Label>\r\n        </TouchableOpacity>\r\n      </Container>\r\n      <DaysToCompletion>\r\n        {numberOfDays === 0 ? \"---\" : numberOfDays} days to completion\r\n      </DaysToCompletion>\r\n      <Divider />\r\n      <TextLabel label=\"Daily Habits to Achieve your Goal\" />\r\n      {habits.map((habit, index) => (\r\n        <Container key={index}>\r\n          <TouchableOpacity style={{ flex: 1 }}>\r\n            <Label>{habit !== \"\" ? habit : \"-\"}</Label>\r\n          </TouchableOpacity>\r\n        </Container>\r\n      ))}\r\n      <BigButton text=\"Set Goal\" />\r\n      <DatePicker\r\n        show={showDatePicker}\r\n        toggle={toggleDatePicker}\r\n        date={endDate}\r\n        onChange={configureDates}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default SetGoalScreen;\r\n\r\nconst View = styled.View`\r\n  flex: 1;\r\n  background-color: ${COLORS.appBlue};\r\n`;\r\n\r\nconst StartingDate = styled.Text`\r\n  font-size: ${wp(\"5%\")};\r\n  color: white;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  font-family: \"PTSans-Regular\";\r\n`;\r\n\r\nconst DaysToCompletion = styled.Text`\r\n  color: ${COLORS.appYelow};\r\n  font-size: ${wp(\"4%\")};\r\n  font-weight: bold;\r\n  margin: 5px auto;\r\n  font-family: \"PTSans-Regular\";\r\n`;\r\n\r\nconst Container = styled.View`\r\n  background: white;\r\n  border-radius: 25px;\r\n  width: ${wp(\"85%\")};\r\n  height: ${hp(\"4%\")};\r\n  margin: 10px auto;\r\n`;\r\n\r\nconst Label = styled.Text`\r\n  color: ${COLORS.appBlue};\r\n  font-size: ${wp(\"4%\")};\r\n  font-weight: bold;\r\n  margin: auto auto;\r\n  font-family: \"PTSans-Regular\";\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}