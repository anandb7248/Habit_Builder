{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/mnt/c/Users/couga/Documents/Github/Habit_Builder/ReactNative/src/screens/SetHabitScreen.js\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  align-items: center;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  align-items: center;\\n  padding-vertical: 20px;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  flex: 1;\\n  background-color: \", \";\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  padding-vertical: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport COLORS from \"../styles/Colors\";\nimport PageHeader from \"../components/PageHeader\";\nimport Divider from \"../components/Divider\";\nimport BigButton from \"../components/BigButton\";\nimport BigTextInput from \"../components/BigTextInput\";\nimport TextLabel from \"../components/TextLabel\";\nimport MediumButton from \"../components/MediumButton\";\nimport SmallButton from \"../components/SmallButton\";\nimport LongButton from \"../components/LongButton\";\nimport BellIcon from \"../assets/images/Bell.svg\";\nimport ReminderButton from \"../components/ReminderButton\";\nimport TimePicker from \"../components/TimePicker\";\n\nfunction SetHabitScreen(props) {\n  var _useState = useState(\"Daily\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var daysText = [\"Su\", \"M\", \"Tu\", \"W\", \"Th\", \"F\", \"Sa\"];\n\n  var _useState3 = useState([false, false, false, false, false, false, false]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      days = _useState4[0],\n      setDays = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      everyday = _useState6[0],\n      everydayStatus = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      show = _useState8[0],\n      setShow = _useState8[1];\n\n  var _useState9 = useState(\"date\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      mode = _useState10[0],\n      setMode = _useState10[1];\n\n  var _useState11 = useState(new Date(1598051730000)),\n      _useState12 = _slicedToArray(_useState11, 2),\n      date = _useState12[0],\n      setDate = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      showTimePicker = _useState14[0],\n      toggleTimePicker = _useState14[1];\n\n  var handleDayClick = function handleDayClick(index) {\n    var newDays = _toConsumableArray(days);\n\n    newDays[index] = !newDays[index];\n    setDays(newDays);\n    var countOn = newDays.filter(function (d) {\n      return d === true;\n    }).length;\n\n    if (countOn === 7) {\n      setDays([false, false, false, false, false, false, false]);\n      everydayStatus(true);\n    } else {\n      everydayStatus(false);\n    }\n  };\n\n  var handleEverydayClick = function handleEverydayClick() {\n    everydayStatus(!everyday);\n\n    if (!everyday) {\n      setDays([false, false, false, false, false, false, false]);\n    }\n  };\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(!show);\n    setDate(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode(\"time\");\n  };\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, React.createElement(PageHeader, {\n    text: \"Set a Habit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), React.createElement(Padding, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, React.createElement(BigTextInput, {\n    placeholder: \"What is the name of your habit?\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })), React.createElement(TextLabel, {\n    label: \"I want to repeat this...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), React.createElement(ViewHorizontal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, React.createElement(MediumButton, {\n    text: \"Daily\",\n    color: status === \"Daily\" ? COLORS.appYelow : COLORS.appGray,\n    onPress: function onPress() {\n      return setStatus(\"Daily\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), React.createElement(MediumButton, {\n    text: \"Weekly\",\n    color: status === \"Weekly\" ? COLORS.appYelow : COLORS.appGray,\n    onPress: function onPress() {\n      return setStatus(\"Weekly\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })), React.createElement(ViewHorizontal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, daysText.map(function (day, index) {\n    return React.createElement(SmallButton, {\n      key: index,\n      text: day,\n      color: days[index] === true ? COLORS.appYelow : COLORS.appGray,\n      onPress: function onPress() {\n        handleDayClick(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    });\n  })), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, React.createElement(LongButton, {\n    text: \"Everyday\",\n    color: everyday === true ? COLORS.appYelow : COLORS.appGray,\n    onPress: function onPress() {\n      handleEverydayClick();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  })), React.createElement(Padding, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), React.createElement(TextLabel, {\n    label: \"Give me a reminder at\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }), React.createElement(ViewHorizontal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, React.createElement(BellIcon, {\n    width: \"20%\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), React.createElement(ReminderButton, {\n    text: \"10 am\",\n    onPress: function onPress() {\n      toggleTimePicker(function (prev) {\n        return !prev;\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, React.createElement(BigButton, {\n    text: \"Set Goal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  })), React.createElement(TimePicker, {\n    show: showTimePicker,\n    toggle: toggleTimePicker,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default SetHabitScreen;\nvar Padding = styled.View(_templateObject());\nvar View = styled.View(_templateObject2(), COLORS.appBlue);\nvar ViewHorizontal = styled.View(_templateObject3());\nvar Container = styled.View(_templateObject4());","map":{"version":3,"sources":["/mnt/c/Users/couga/Documents/Github/Habit_Builder/ReactNative/src/screens/SetHabitScreen.js"],"names":["React","useState","styled","COLORS","PageHeader","Divider","BigButton","BigTextInput","TextLabel","MediumButton","SmallButton","LongButton","BellIcon","ReminderButton","TimePicker","SetHabitScreen","props","status","setStatus","daysText","days","setDays","everyday","everydayStatus","show","setShow","mode","setMode","Date","date","setDate","showTimePicker","toggleTimePicker","handleDayClick","index","newDays","countOn","filter","d","length","handleEverydayClick","onChange","event","selectedDate","currentDate","showMode","currentMode","showTimepicker","appYelow","appGray","map","day","prev","Padding","View","appBlue","ViewHorizontal","Container"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport COLORS from \"../styles/Colors\";\r\nimport PageHeader from \"../components/PageHeader\";\r\nimport Divider from \"../components/Divider\";\r\nimport BigButton from \"../components/BigButton\";\r\nimport BigTextInput from \"../components/BigTextInput\";\r\nimport TextLabel from \"../components/TextLabel\";\r\nimport MediumButton from \"../components/MediumButton\";\r\nimport SmallButton from \"../components/SmallButton\";\r\nimport LongButton from \"../components/LongButton\";\r\nimport BellIcon from \"../assets/images/Bell.svg\";\r\nimport ReminderButton from \"../components/ReminderButton\";\r\nimport TimePicker from \"../components/TimePicker\";\r\n\r\nfunction SetHabitScreen(props) {\r\n  const [status, setStatus] = useState(\"Daily\");\r\n  const daysText = [\"Su\", \"M\", \"Tu\", \"W\", \"Th\", \"F\", \"Sa\"];\r\n  const [days, setDays] = useState([\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n    false,\r\n  ]);\r\n\r\n  const [everyday, everydayStatus] = useState(true);\r\n  const [show, setShow] = useState(false);\r\n  const [mode, setMode] = useState(\"date\");\r\n  const [date, setDate] = useState(new Date(1598051730000));\r\n  const [showTimePicker, toggleTimePicker] = useState(false);\r\n\r\n  const handleDayClick = (index) => {\r\n    let newDays = [...days];\r\n    newDays[index] = !newDays[index];\r\n    setDays(newDays);\r\n\r\n    const countOn = newDays.filter((d) => {\r\n      return d === true;\r\n    }).length;\r\n\r\n    if (countOn === 7) {\r\n      setDays([false, false, false, false, false, false, false]);\r\n      everydayStatus(true);\r\n    } else {\r\n      everydayStatus(false);\r\n    }\r\n  };\r\n\r\n  const handleEverydayClick = () => {\r\n    everydayStatus(!everyday);\r\n\r\n    if (!everyday) {\r\n      setDays([false, false, false, false, false, false, false]);\r\n    }\r\n  };\r\n\r\n  const onChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    setShow(!show);\r\n    setDate(currentDate);\r\n  };\r\n\r\n  const showMode = (currentMode) => {\r\n    setShow(true);\r\n    setMode(currentMode);\r\n  };\r\n\r\n  const showTimepicker = () => {\r\n    showMode(\"time\");\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <PageHeader text=\"Set a Habit\"></PageHeader>\r\n      <Divider />\r\n      <Padding>\r\n        <BigTextInput placeholder=\"What is the name of your habit?\"></BigTextInput>\r\n      </Padding>\r\n      <TextLabel label=\"I want to repeat this...\" />\r\n      <ViewHorizontal>\r\n        <MediumButton\r\n          text=\"Daily\"\r\n          color={status === \"Daily\" ? COLORS.appYelow : COLORS.appGray}\r\n          onPress={() => setStatus(\"Daily\")}\r\n        />\r\n        <MediumButton\r\n          text=\"Weekly\"\r\n          color={status === \"Weekly\" ? COLORS.appYelow : COLORS.appGray}\r\n          onPress={() => setStatus(\"Weekly\")}\r\n        />\r\n      </ViewHorizontal>\r\n      <ViewHorizontal>\r\n        {daysText.map((day, index) => {\r\n          return (\r\n            <SmallButton\r\n              key={index}\r\n              text={day}\r\n              color={days[index] === true ? COLORS.appYelow : COLORS.appGray}\r\n              onPress={() => {\r\n                handleDayClick(index);\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </ViewHorizontal>\r\n      <Container>\r\n        <LongButton\r\n          text=\"Everyday\"\r\n          color={everyday === true ? COLORS.appYelow : COLORS.appGray}\r\n          onPress={() => {\r\n            handleEverydayClick();\r\n          }}\r\n        />\r\n      </Container>\r\n      <Padding />\r\n      <TextLabel label=\"Give me a reminder at\" />\r\n      <ViewHorizontal>\r\n        <BellIcon width=\"20%\" />\r\n        <ReminderButton\r\n          text=\"10 am\"\r\n          onPress={() => {\r\n            toggleTimePicker((prev) => !prev);\r\n          }}\r\n        />\r\n      </ViewHorizontal>\r\n      <Container>\r\n        <BigButton text=\"Set Goal\" />\r\n      </Container>\r\n      <TimePicker\r\n        show={showTimePicker}\r\n        toggle={toggleTimePicker}\r\n        onChange={onChange}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default SetHabitScreen;\r\n\r\nconst Padding = styled.View`\r\n  padding-vertical: 20px;\r\n`;\r\n\r\nconst View = styled.View`\r\n  flex: 1;\r\n  background-color: ${COLORS.appBlue};\r\n`;\r\n\r\nconst ViewHorizontal = styled.View`\r\n  flex-direction: row;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  padding-vertical: 20px;\r\n`;\r\n\r\nconst Container = styled.View`\r\n  align-items: center;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}